-- DarkMirror Classic UI Library (Full with Global Callback Support + Styled Scrollbars)
-- Usage example included above in the earlier script section.

local Library = {}
Library.__index = Library

-- Global callback
local globalCallback = nil
function Library:SetCallback(func)
    globalCallback = func
end

-- Roblox Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local playerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Default icons
local defaultShowIcon = "rbxassetid://YOUR_SHOW_ICON_ID"
local defaultHideIcon = "rbxassetid://YOUR_HIDE_ICON_ID"

-- Base ScreenGui
local baseScreenGui = Instance.new("ScreenGui")
baseScreenGui.Name = "DarkMirrorClassicUILib"
baseScreenGui.Parent = playerGui
baseScreenGui.ResetOnSpawn = false

-- Show/Hide draggable button
local showHideBtn = Instance.new("ImageButton")
showHideBtn.Size = UDim2.new(0, 60, 0, 60)
showHideBtn.Position = UDim2.new(0, 24, 0.5, -30)
showHideBtn.AnchorPoint = Vector2.new(0, 0.5)
showHideBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
showHideBtn.Image = defaultHideIcon
showHideBtn.Parent = baseScreenGui
showHideBtn.ZIndex = 99

local showHideBtnStroke = Instance.new("UIStroke", showHideBtn)
showHideBtnStroke.Color = Color3.fromRGB(255, 0, 0)
showHideBtnStroke.Thickness = 2

-- Draggable button logic (unchanged)
do
    local dragging, dragInput, dragStart, startPos
    local function updateDrag(input)
        local delta = input.Position - dragStart
        showHideBtn.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end
    showHideBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = showHideBtn.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    showHideBtn.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateDrag(input)
        end
    end)
end

-- Helper utilities
local function createUICorner(instance, radius)
    local c = Instance.new("UICorner")
    c.CornerRadius = radius or UDim.new(0, 6)
    c.Parent = instance
    return c
end

local function createUIStroke(instance, color, thickness)
    local s = Instance.new("UIStroke")
    s.Color = color or Color3.fromRGB(255, 0, 0)
    s.Thickness = thickness or 2
    s.Parent = instance
    return s
end

local function styleScrollbar(scrollingFrame)
    local scrollbar = Instance.new("Frame")
    scrollbar.Name = "CustomScrollbar"
    scrollbar.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
    scrollbar.Size = UDim2.new(0, 6, 1, 0)
    scrollbar.Position = UDim2.new(1, -6, 0, 0)
    scrollbar.Parent = scrollingFrame

    local scrollbarThumb = Instance.new("Frame")
    scrollbarThumb.Name = "ScrollbarThumb"
    scrollbarThumb.BackgroundColor3 = Color3.fromRGB(180, 0, 0)
    scrollbarThumb.Size = UDim2.new(1, 0, 0, 40)
    scrollbarThumb.Position = UDim2.new(0, 0, 0, 0)
    scrollbarThumb.Parent = scrollbar
    createUICorner(scrollbarThumb, UDim.new(1, 0))

    scrollingFrame:GetPropertyChangedSignal("CanvasPosition"):Connect(function()
        local contentSize = scrollingFrame.AbsoluteCanvasSize.Y
        local viewSize = scrollingFrame.AbsoluteSize.Y
        local scrollPos = scrollingFrame.CanvasPosition.Y
        local ratio = viewSize / contentSize
        scrollbarThumb.Size = UDim2.new(1, 0, ratio, 0)
        scrollbarThumb.Position = UDim2.new(0, 0, scrollPos / contentSize, 0)
    end)
end

-- Library constructor
function Library:CreateWindow(guiName, sidebarTitle)
    local Window = {}
    Window.__index = Window

    local screenGui = baseScreenGui
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 480, 0, 320)
    mainFrame.Position = UDim2.new(0.5, -240, 0.5, -160)
    mainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    mainFrame.BackgroundTransparency = 0.25
    mainFrame.Parent = screenGui
    mainFrame.Name = guiName or "DarkMirrorClassicUI"

    createUIStroke(mainFrame, Color3.fromRGB(255, 0, 0), 3)

    local sidebar = Instance.new("ScrollingFrame")
    sidebar.Size = UDim2.new(0, 154, 1, 0)
    sidebar.CanvasSize = UDim2.new(0,0,0,0)
    sidebar.ScrollBarThickness = 0
    sidebar.BackgroundColor3 = Color3.fromRGB(24, 24, 24)
    sidebar.BackgroundTransparency = 0.3
    sidebar.Parent = mainFrame
    sidebar.Active = true
    sidebar.Name = "Sidebar"

    styleScrollbar(sidebar) -- Sidebar scrollbar

    local sidebarList = Instance.new("UIListLayout", sidebar)
    sidebarList.SortOrder = Enum.SortOrder.LayoutOrder
    sidebarList.Padding = UDim.new(0, 8)

    sidebarList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        sidebar.CanvasSize = UDim2.new(0, 0, 0, sidebarList.AbsoluteContentSize.Y + 12)
    end)

    -- Draggable UI
    do
        local dragging, dragInput, dragStart, startPos
        local function updateDrag(input)
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
        sidebar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = mainFrame.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
        sidebar.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                updateDrag(input)
            end
        end)
    end

    local sidebarTitleLabel = Instance.new("TextLabel")
    sidebarTitleLabel.Size = UDim2.new(1, -24, 0, 38)
    sidebarTitleLabel.Position = UDim2.new(0, 12, 0, 8)
    sidebarTitleLabel.BackgroundTransparency = 1
    sidebarTitleLabel.Text = sidebarTitle or "ClassicBruh"
    sidebarTitleLabel.Font = Enum.Font.GothamBold
    sidebarTitleLabel.TextSize = 24
    sidebarTitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    sidebarTitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    sidebarTitleLabel.Parent = sidebar

    local content = Instance.new("Frame")
    content.Size = UDim2.new(1, -166, 1, -20)
    content.Position = UDim2.new(0, 154, 0, 10)
    content.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    content.BackgroundTransparency = 0.35
    content.Parent = mainFrame

    local tabFrames = {}
    local sidebarButtons = {}

    local uiVisible = true
    showHideBtn.MouseButton1Click:Connect(function()
        uiVisible = not uiVisible
        mainFrame.Visible = uiVisible
        showHideBtn.Image = uiVisible and defaultHideIcon or defaultShowIcon
    end)

    function Window:CreateTab(name)
        local tabFrame = Instance.new("ScrollingFrame")
        tabFrame.Size = UDim2.new(1, 0, 1, 0)
        tabFrame.BackgroundTransparency = 1
        tabFrame.Visible = false
        tabFrame.ScrollBarThickness = 0
        tabFrame.CanvasSize = UDim2.new(0,0,0,0)
        tabFrame.Parent = content
        tabFrame.Name = name

        styleScrollbar(tabFrame) -- Tab scrollbar

        local layout = Instance.new("UIListLayout", tabFrame)
        layout.FillDirection = Enum.FillDirection.Vertical
        layout.Padding = UDim.new(0, 8)
        layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        layout.VerticalAlignment = Enum.VerticalAlignment.Top

        layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabFrame.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 12)
        end)

        tabFrames[name] = tabFrame

        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(1, -12, 0, 36)
        btn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        btn.Text = name
        btn.TextColor3 = Color3.fromRGB(255, 255, 255)
        btn.Font = Enum.Font.GothamMedium
        btn.TextSize = 16
        btn.TextXAlignment = Enum.TextXAlignment.Left
        btn.Parent = sidebar

        btn.MouseButton1Click:Connect(function()
            for _, f in pairs(tabFrames) do f.Visible = false end
            tabFrame.Visible = true
            for _, b in pairs(sidebarButtons) do b.BackgroundColor3 = Color3.fromRGB(30, 30, 30) end
            btn.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
        end)

        table.insert(sidebarButtons, btn)
        if #sidebarButtons == 1 then
            tabFrame.Visible = true
            btn.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
        end

        local Tab = {}
        Tab.__index = Tab

        local function createRow(parent, labelText, element)
            local row = Instance.new("Frame")
            row.Size = UDim2.new(0.9, 0, 0, 40)
            row.BackgroundTransparency = 1
            row.Parent = parent

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0.6, 0, 1, 0)
            label.BackgroundTransparency = 1
            label.Text = labelText
            label.Font = Enum.Font.GothamBold
            label.TextSize = 14
            label.TextColor3 = Color3.fromRGB(255,255,255)
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = row

            element.Parent = row
            local elWidth, elHeight = 0, 0
            if element.Size and element.Size.X and element.Size.Y then
                if element.Size.X.Offset then elWidth = element.Size.X.Offset end
                if element.Size.Y.Offset then elHeight = element.Size.Y.Offset end
            end
            element.Position = UDim2.new(1, -elWidth, 0.5, -elHeight/2)
        end

        -- Toggle control
        function Tab:CreateToggle(name, callback)
            callback = callback or function() end
            local toggleSwitch = Instance.new("TextButton")
            toggleSwitch.Size = UDim2.new(0, 40, 0, 18)
            toggleSwitch.BackgroundColor3 = Color3.fromRGB(60,0,0)
            toggleSwitch.Text = ""
            toggleSwitch.AutoButtonColor = false
            createUICorner(toggleSwitch, UDim.new(1,0))
            local switchCircle = Instance.new("Frame")
            switchCircle.Size = UDim2.new(0, 13, 1, -4)
            switchCircle.Position = UDim2.new(0, 2, 0, 2)
            switchCircle.BackgroundColor3 = Color3.fromRGB(255,255,255)
            switchCircle.Parent = toggleSwitch
            createUICorner(switchCircle, UDim.new(1,0))

            local toggleOn = false
            toggleSwitch.MouseButton1Click:Connect(function()
                toggleOn = not toggleOn
                if toggleOn then
                    TweenService:Create(toggleSwitch,TweenInfo.new(0.25),{BackgroundColor3=Color3.fromRGB(255,0,0)}):Play()
                    TweenService:Create(switchCircle,TweenInfo.new(0.25),{Position=UDim2.new(1,-15,0,2)}):Play()
                else
                    TweenService:Create(toggleSwitch,TweenInfo.new(0.25),{BackgroundColor3=Color3.fromRGB(60,0,0)}):Play()
                    TweenService:Create(switchCircle,TweenInfo.new(0.25),{Position=UDim2.new(0,2,0,2)}):Play()
                end
                pcall(callback, toggleOn)
                if globalCallback then pcall(globalCallback, "Toggle", name, toggleOn) end
            end)
            createRow(tabFrame, name..":", toggleSwitch)
            return toggleSwitch
        end

        -- Slider control
        function Tab:CreateSlider(name, min, max, default, callback)
            if type(default) == "function" and callback == nil then
                callback = default
                default = min or 0
            end
            min = min or 0
            max = max or 100
            default = default or min
            callback = callback or function() end

            local sliderFrame = Instance.new("Frame")
            sliderFrame.Size = UDim2.new(0, 160, 0, 10)
            sliderFrame.BackgroundColor3 = Color3.fromRGB(80,0,0)
            createUICorner(sliderFrame, UDim.new(1,0))

            local sliderThumb = Instance.new("Frame")
            sliderThumb.Size = UDim2.new(0,14,0,14)
            sliderThumb.Position = UDim2.new(0,0,-0.2,-2)
            sliderThumb.BackgroundColor3 = Color3.fromRGB(255,255,255)
            sliderThumb.Parent = sliderFrame
            createUICorner(sliderThumb, UDim.new(1,0))

            local sliderValueLabel = Instance.new("TextLabel")
            sliderValueLabel.Size = UDim2.new(0,30,1,0)
            sliderValueLabel.Position = UDim2.new(1,6,0,-2)
            sliderValueLabel.BackgroundTransparency = 1
            sliderValueLabel.Text = tostring(default)
            sliderValueLabel.Font = Enum.Font.GothamBold
            sliderValueLabel.TextColor3 = Color3.fromRGB(255,255,255)
            sliderValueLabel.TextSize = 12
            sliderValueLabel.Parent = sliderFrame

            local sliderValue = default
            local draggingSlider = false
            local function updateSlider(inputX)
                local absPosX = sliderFrame.AbsolutePosition.X
                local absSizeX = sliderFrame.AbsoluteSize.X
                local relativeX = 0
                if absSizeX > 0 then
                    relativeX = math.clamp((inputX - absPosX)/absSizeX, 0, 1)
                end
                sliderThumb.Position = UDim2.new(relativeX, -7, -0.2, -2)
                sliderValue = math.floor(min + (max - min) * relativeX)
                sliderValueLabel.Text = tostring(sliderValue)
                pcall(callback, sliderValue)
                if globalCallback then pcall(globalCallback, "Slider", name, sliderValue) end
            end
            sliderThumb.InputBegan:Connect(function(input)
                if input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then
                    draggingSlider = true
                end
            end)
            sliderThumb.InputEnded:Connect(function(input)
                if input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then
                    draggingSlider = false
                end
            end)
            UserInputService.InputChanged:Connect(function(input)
                if draggingSlider and (input.UserInputType==Enum.UserInputType.MouseMovement or input.UserInputType==Enum.UserInputType.Touch) then
                    updateSlider(input.Position.X)
                end
            end)
            sliderFrame.InputBegan:Connect(function(input)
                if input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then
                    updateSlider(input.Position.X)
                    draggingSlider = true
                end
            end)
            sliderFrame.InputEnded:Connect(function(input)
                if input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then
                    draggingSlider = false
                end
            end)
            sliderFrame:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
                local rel = 0
                if max ~= min then rel = (default - min) / (max - min) end
                sliderThumb.Position = UDim2.new(math.clamp(rel,0,1), -7, -0.2, -2)
            end)

            createRow(tabFrame, name..":", sliderFrame)
            return sliderFrame
        end

        -- Dropdown control
        function Tab:CreateDropdown(name, options, callback)
            callback = callback or function() end
            options = options or {}

            local dropdownFrame = Instance.new("Frame")
            dropdownFrame.Size = UDim2.new(0, 160, 0, 20)
            dropdownFrame.BackgroundColor3 = Color3.fromRGB(30,0,0)
            createUICorner(dropdownFrame, UDim.new(0,6))

            local dropdownLabel = Instance.new("TextLabel")
            dropdownLabel.Size = UDim2.new(1,-20,1,0)
            dropdownLabel.BackgroundTransparency = 1
            dropdownLabel.Text = options[1] or "None"
            dropdownLabel.TextColor3 = Color3.fromRGB(255,255,255)
            dropdownLabel.Font = Enum.Font.GothamBold
            dropdownLabel.TextSize = 12
            dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
            dropdownLabel.Parent = dropdownFrame

            local dropdownButton = Instance.new("TextButton")
            dropdownButton.Size = UDim2.new(0, 20, 1, 0)
            dropdownButton.Position = UDim2.new(1,-20,0,0)
            dropdownButton.Text = "▼"
            dropdownButton.BackgroundTransparency = 1
            dropdownButton.TextColor3 = Color3.fromRGB(255,255,255)
            dropdownButton.Font = Enum.Font.GothamBold
            dropdownButton.TextSize = 14
            dropdownButton.Parent = dropdownFrame

            local dropdownList = Instance.new("Frame")
            dropdownList.Visible = false
            dropdownList.BackgroundColor3 = Color3.fromRGB(20,20,20)
            dropdownList.Size = UDim2.new(0, 160, 0, #options*20)
            dropdownList.Parent = dropdownFrame

            for i,opt in ipairs(options) do
                local optBtn = Instance.new("TextButton")
                optBtn.Size = UDim2.new(1,0,0,20)
                optBtn.Position = UDim2.new(0,0,(i-1)*20,0)
                optBtn.BackgroundTransparency = 0
                optBtn.BackgroundColor3 = Color3.fromRGB(40,0,0)
                optBtn.Text = opt
                optBtn.TextColor3 = Color3.fromRGB(255,255,255)
                optBtn.Font = Enum.Font.Gotham
                optBtn.TextSize = 12
                optBtn.Parent = dropdownList

                optBtn.MouseButton1Click:Connect(function()
                    dropdownLabel.Text = opt
                    pcall(callback,opt)
                    if globalCallback then pcall(globalCallback,"Dropdown",name,opt) end
                    dropdownList.Visible = false
                end)
            end

            dropdownButton.MouseButton1Click:Connect(function()
                dropdownList.Visible = not dropdownList.Visible
            end)

            createRow(tabFrame,name..":",dropdownFrame)
            return dropdownFrame
        end

        -- Textbox control
        function Tab:CreateTextbox(name,placeholder,callback)
            callback = callback or function() end

            local textbox = Instance.new("TextBox")
            textbox.Size = UDim2.new(0,140,0,20)
            textbox.BackgroundColor3 = Color3.fromRGB(30,0,0)
            textbox.Text = placeholder or ""
            textbox.TextColor3 = Color3.fromRGB(255,255,255)
            textbox.Font = Enum.Font.Gotham
            textbox.TextSize = 12
            createUICorner(textbox,UDim.new(0,6))
            textbox.ClearTextOnFocus = false

            textbox.FocusLost:Connect(function()
                pcall(callback,textbox.Text)
                if globalCallback then pcall(globalCallback,"Textbox",name,textbox.Text) end
            end)

            createRow(tabFrame,name..":",textbox)
            return textbox
        end

        -- Button control
        function Tab:CreateButton(name,callback)
            callback = callback or function() end

            local button = Instance.new("TextButton")
            button.Size = UDim2.new(0,160,0,30)
            button.BackgroundColor3 = Color3.fromRGB(60,0,0)
            button.Text = name
            button.TextColor3 = Color3.fromRGB(255,255,255)
            button.Font = Enum.Font.GothamBold
            button.TextSize = 14
            createUICorner(button,UDim.new(0,6))

            button.MouseButton1Click:Connect(function()
                pcall(callback)
                if globalCallback then pcall(globalCallback,"Button",name,true) end
            end)

            createRow(tabFrame,"",button)
            return button
        end

        return setmetatable(Tab,Tab)
    end

    return setmetatable(Window,Window)
end

return setmetatable(Library,Library)
